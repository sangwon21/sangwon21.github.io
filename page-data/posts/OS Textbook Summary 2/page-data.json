{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/OS Textbook Summary 2","result":{"data":{"markdownRemark":{"id":"087c77c0-86e8-5984-88a0-72cfe238cd52","html":"<h1 id=\"컴퓨터의-기본-구성\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%93%A8%ED%84%B0%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EA%B5%AC%EC%84%B1\" aria-label=\"컴퓨터의 기본 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴퓨터의 기본 구성</h1>\n<br>\n<h2 id=\"01-컴퓨터의-기본-구성\" style=\"position:relative;\"><a href=\"#01-%EC%BB%B4%ED%93%A8%ED%84%B0%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EA%B5%AC%EC%84%B1\" aria-label=\"01 컴퓨터의 기본 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>01 컴퓨터의 기본 구성</h2>\n<br>\n<h3 id=\"1-하드웨어의-구성\" style=\"position:relative;\"><a href=\"#1-%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4%EC%9D%98-%EA%B5%AC%EC%84%B1\" aria-label=\"1 하드웨어의 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 하드웨어의 구성</h3>\n<ol>\n<li>CPU와 메모리</li>\n<li>입출력 장치</li>\n<li>저장장치</li>\n<li>\n<p>메인보드</p>\n<ul>\n<li>버스</li>\n<li>일정한 규칙에 따라 각 장치에 데이터를 전송하는 역할</li>\n<li>각 장치를 연결하는 선의 집합이자 데이터가 지나다니는 통로</li>\n</ul>\n</li>\n</ol>\n<br>\n<h3 id=\"2-폰노이만-구조\" style=\"position:relative;\"><a href=\"#2-%ED%8F%B0%EB%85%B8%EC%9D%B4%EB%A7%8C-%EA%B5%AC%EC%A1%B0\" aria-label=\"2 폰노이만 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 폰노이만 구조</h3>\n<ul>\n<li>‘모든 프로그램은 메모리에 올라와야 실행할 수 있다’</li>\n</ul>\n<br>\n<h3 id=\"3-요리사-모형\" style=\"position:relative;\"><a href=\"#3-%EC%9A%94%EB%A6%AC%EC%82%AC-%EB%AA%A8%ED%98%95\" aria-label=\"3 요리사 모형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 요리사 모형</h3>\n<br>\n<h3 id=\"4-하드웨어-사양-관련-용어\" style=\"position:relative;\"><a href=\"#4-%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4-%EC%82%AC%EC%96%91-%EA%B4%80%EB%A0%A8-%EC%9A%A9%EC%96%B4\" aria-label=\"4 하드웨어 사양 관련 용어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 하드웨어 사양 관련 용어</h3>\n<ul>\n<li>\n<p>클록</p>\n<ul>\n<li>CPU가 작업을 할 때 일정한 박자</li>\n<li>버스는 여러 개 부품이 연결 -> 메인보드의 클록이 틱을 보낼 때마다 데이터를 보내고 받는다</li>\n</ul>\n</li>\n<li>\n<p>헤르츠</p>\n<ul>\n<li>클록틱이 발생하는 속도를 나타내는 단위</li>\n</ul>\n</li>\n<li>\n<p>시스텀 버스</p>\n<ul>\n<li>FSB(Front Side Bus)</li>\n<li>메모리의 속도와 같다</li>\n</ul>\n</li>\n<li>\n<p>CPU 내부 버스</p>\n<ul>\n<li>BSB(Back Side Bus)</li>\n<li>CPU 내부 버스의 속도는 CPU의 클록과 속도가 같다</li>\n<li>시스템 버스보다 속도가 빠르다</li>\n</ul>\n</li>\n</ul>\n<br>\n<br>\n<h2 id=\"02-cpu와-메모리\" style=\"position:relative;\"><a href=\"#02-cpu%EC%99%80-%EB%A9%94%EB%AA%A8%EB%A6%AC\" aria-label=\"02 cpu와 메모리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>02 CPU와 메모리</h2>\n<br>\n<h3 id=\"1-cpu의-구성과-동작\" style=\"position:relative;\"><a href=\"#1-cpu%EC%9D%98-%EA%B5%AC%EC%84%B1%EA%B3%BC-%EB%8F%99%EC%9E%91\" aria-label=\"1 cpu의 구성과 동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. CPU의 구성과 동작</h3>\n<ol>\n<li>\n<p>CPU의 기본 구성</p>\n<ul>\n<li>산술논리 연산장치</li>\n<li>ALU(Arithmetic and Logic Unit)</li>\n<li>CPU에서 데이터를 연산하는 장치</li>\n<li>제어 장치</li>\n<li>CPU에서 작업을 지시하는 장치</li>\n<li>레지스터</li>\n<li>CPU 내에 데이터를 임시로 보관하는 곳</li>\n</ul>\n</li>\n<li>CPU의 명령어 처리 과정</li>\n<li>레지스터의 종류</li>\n<li>\n<p>버스의 종류</p>\n<ul>\n<li>제어 버스</li>\n<li>다음에 어떤 작업을 할지 지시하는 제어 신호가 오고 간다</li>\n<li>주소 버스</li>\n<li>메모리의 데이터를 읽거나 쓸 때 어느 위치에서 작업할 것인지 알려주는 위치 정보(주소)가 오고 간다</li>\n<li>데이터 버스</li>\n<li>제어 버스가 다음에 어떤 작업을 할 지 신호를 보내고 주소 버스가 위치 정보를 전달하면 데이터가 데이터 버스에 실려 목적지까지 이동</li>\n<li>버스의 대역폭</li>\n<li>한 번에 전달할 수 있는 데이터의 최대 크기</li>\n<li>CPU가 한 번에 처리할 수 있는 데이터의 최대 크기 -> 워드(word)</li>\n<li>버스의 대역폭과 메모리에 한 번에 저장되는 단위 -> 워드</li>\n</ul>\n</li>\n</ol>\n<br>\n<h3 id=\"2-메모리의-종류와-부팅\" style=\"position:relative;\"><a href=\"#2-%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%9D%98-%EC%A2%85%EB%A5%98%EC%99%80-%EB%B6%80%ED%8C%85\" aria-label=\"2 메모리의 종류와 부팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 메모리의 종류와 부팅</h3>\n<ol>\n<li>\n<p>메모리의 종류</p>\n<ul>\n<li>휘발성 메모리</li>\n<li>\n<p>DRAM(Dynamic RAM)</p>\n<ul>\n<li>데이터가 일정 시간 지나면 사라진다</li>\n<li>메인 메모리</li>\n</ul>\n</li>\n<li>\n<p>SRAM(Static RAM)</p>\n<ul>\n<li>전력이 공급되는 동안에는 데이터를 보관</li>\n<li>캐시</li>\n</ul>\n</li>\n<li>비휘발성 메모리</li>\n</ul>\n</li>\n<li>\n<p>메모리 보호</p>\n<ul>\n<li>CPU는 현재 진행 중인 작업의 메모리 시작 주소를 경계 레지스터에 저장한 후 작업</li>\n<li>현재 진행 중인 작업이 차지하고 있는 메모리의 크기, 즉 마지막 주소까지 차이를 한계 레지스터에 저장</li>\n</ul>\n</li>\n<li>\n<p>부팅</p>\n<ul>\n<li>컴퓨터를 켰을 때 운영체제를 메모리에 올리는 과정</li>\n<li>하드디스크의 마스터 부트 레코드(MBR)에 저장된 작은 프로그램을 메모리로 가져와 실행</li>\n<li>마스터 부트 레코드는 하드디스크의 첫 번째 섹터를 가리킨다</li>\n<li>운영체제를 실행하기 위한 코드 -> 부트스트랩(bootstrap)</li>\n<li>부트스트랩 코드는 운영체제를 메모리로 가져와 실행하는 역할</li>\n</ul>\n</li>\n</ol>\n<br>\n<br>\n<h2 id=\"3-컴퓨터-성능-향상-기술\" style=\"position:relative;\"><a href=\"#3-%EC%BB%B4%ED%93%A8%ED%84%B0-%EC%84%B1%EB%8A%A5-%ED%96%A5%EC%83%81-%EA%B8%B0%EC%88%A0\" aria-label=\"3 컴퓨터 성능 향상 기술 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 컴퓨터 성능 향상 기술</h2>\n<br>\n<h3 id=\"1-버퍼\" style=\"position:relative;\"><a href=\"#1-%EB%B2%84%ED%8D%BC\" aria-label=\"1 버퍼 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 버퍼</h3>\n<ol>\n<li>\n<p>버퍼의 개념</p>\n<ul>\n<li>속도에 차이가 있는 두 장치 사이에서 그 차이를 완화하는 역할을 한다</li>\n<li>느린 입출력 장치에서 데이터를 읽을 때마다 하나씩 전송 -> 실제로 전송되는 데이터 양이 매우 작다</li>\n<li>일정량의 데이터를 모아 한꺼번에 전송 -> 많은 양의 데이터를 옮길 수 있다</li>\n</ul>\n</li>\n<li>\n<p>스풀</p>\n<ul>\n<li>일종의 버퍼</li>\n<li>프로그램들이 버퍼를 공유</li>\n<li>스풀은 프로그램 간에 배타적</li>\n</ul>\n</li>\n</ol>\n<br>\n<h3 id=\"2-캐시\" style=\"position:relative;\"><a href=\"#2-%EC%BA%90%EC%8B%9C\" aria-label=\"2 캐시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 캐시</h3>\n<ol>\n<li>\n<p>캐시의 개념</p>\n<ul>\n<li>메모리와 CPU 간 속도 차이를 완화 -> 메모리의 데이터를 미리 가져와 저장해두는 임시 장소</li>\n<li>CPU가 앞으로 사용할 것으로 예상되는 데이터를 미리 가져다 놓는다 -> 미리 가져오기(prefetch)</li>\n<li>컴퓨터 성능 향상 -> 캐시 적중률을 높여야 한다</li>\n<li>캐시의 크기를 늘린다</li>\n<li>앞으로 많이 사용될 데이터를 가져오는 것 -> 현재 위치에 가까운 데이터가 멀리 있는 데이터보다 사용될 확률이 더 높다는 지역성 이론</li>\n</ul>\n</li>\n<li>\n<p>즉시 쓰기와 지연 쓰기</p>\n<ul>\n<li>즉시 쓰기</li>\n<li>캐시에 있는 데이터가 변경되면 이를 즉시 메모리에 반영하는 방식</li>\n<li>메모리와 빈번한 데이터 전송으로 성능이 느려진다</li>\n<li>메모리의 최신 값이 항상 유지되기 때문에 급작스러운 정전에도 데이터를 잃어버리지 않는다</li>\n<li>지연 쓰기</li>\n<li>캐시에 있는 데이터가 변경되면 이를 즉시 메모리에 반영하지 않고 변경된 내용을 모아서 주기적으로 반영하는 방식</li>\n<li>메모리와 데이터 전송 횟수가 줄어들어 시스템 성능 향상</li>\n<li>메모리와 캐시된 데이터 사이 불일치가 발생</li>\n</ul>\n</li>\n<li>\n<p>L1 캐시와 L2 캐시</p>\n<ul>\n<li>L1 캐시</li>\n<li>명령어 캐시나 데이터 캐시는 CPU 레지스터에 직접 연결되기 때문</li>\n<li>L2 캐시</li>\n<li>일반 캐시는 메모리와 연결되기 때문</li>\n</ul>\n</li>\n</ol>\n<br>\n<h3 id=\"3-저장장치의-계층-구조\" style=\"position:relative;\"><a href=\"#3-%EC%A0%80%EC%9E%A5%EC%9E%A5%EC%B9%98%EC%9D%98-%EA%B3%84%EC%B8%B5-%EA%B5%AC%EC%A1%B0\" aria-label=\"3 저장장치의 계층 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 저장장치의 계층 구조</h3>\n<ul>\n<li>CPU와 가까운 쪽에 레지스터나 캐시를 배치 -> CPU가 작업을 빨리 진행</li>\n<li>메모리에서 작업한 내용 -> 하드디스크와 같이 저렴하고 용량이 큰 저장장치에 영구적으로 저장</li>\n<li>\n<p>중복되는 데이터의 일관성을 유지하는 것이 문제</p>\n<ul>\n<li>지연 쓰기의 경우 문제</li>\n<li>협업 중인 다른 작업에서 해당 데이터를 읽으려 한다면 일관성이 깨질 수 있다</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3 id=\"4-인터럽트\" style=\"position:relative;\"><a href=\"#4-%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8\" aria-label=\"4 인터럽트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 인터럽트</h3>\n<ol>\n<li>\n<p>인터럽트의 개념</p>\n<ul>\n<li>폴링 방식(Polling)</li>\n<li>CPU가 직접 입출력장치에서 데이터를 가져오거나 내보냈다</li>\n<li>CPU가 입출력 장치의 상태를 주기적으로 검사하여 일정한 조건을 만족할 때 데이터를 처리</li>\n<li>CPU가 명령어 해석과 실행이라는 본래 역할 외에 모든 입출력까지 관여 -> 작업 효율이 떨어진다</li>\n<li>인터럽트 방식</li>\n<li>CPU 작업과 저장장치 데이터 이동을 독립적으로 운영</li>\n</ul>\n</li>\n<li>\n<p>인터럽트 방식의 동작 과정</p>\n<ul>\n<li>동작 과정</li>\n<li>CPU가 입출력 관리자에게 입출력 명령을 보낸다</li>\n<li>입출력 관리자는 명령받은 데이터를 메모리에 가져다 놓거나 메모리에 있는 데이터를 저장장치로 옮긴다</li>\n<li>데이터 전송이 완료되면 입출력 관리자는 완려 신호를 CPU에 보낸다</li>\n<li>입출력 관리자가 CPU에 보내는 완료 신호를 인터럽트</li>\n<li>CPU는 입출력 관리자에게 작업 지시를 내리고 다른 일을 하다가 완료 신화를 받으면 하던 일을 중단하고 옮겨진 데이터를 처리</li>\n<li>CPU는 입출력 관리자에게 여러 개 입출력 작업을 동시에 진행</li>\n<li>여러 작업이 동시에 완료되고 그때마다 인터럽트를 여러번 사용 -> 비효율적</li>\n</ul>\n</li>\n<li>\n<p>직접 메모리 접근</p>\n<ul>\n<li>입출력 관리자가 데이터의 입출력을 맡게 되었다</li>\n<li>메모리는 CPU만 접근 권한을 가졌다</li>\n<li>CPU의 허락 없이 메모리에 접근할 수 있는 권한</li>\n</ul>\n</li>\n<li>\n<p>메모리 매핑 입출력</p>\n<ul>\n<li>메모리에는 CPU가 사용하는 데이터와 입출력 장치가 사용하는 데이터가 섞여 있다 -> 관리가 어렵다</li>\n<li>메모리를 나누어 사용하는 방법이 도입</li>\n</ul>\n</li>\n<li>\n<p>사이클 훔치기</p>\n<ul>\n<li>CPU와 직접 메모리 접근이 동시에 메모리에 접근하면 CPU가 메모리 사용 권한을 양보</li>\n<li>CPU의 작업 속도보다 입출력 장치의 속도가 느리기 때문에 직접 메모리 접근에 양보</li>\n</ul>\n</li>\n</ol>\n<br>\n<br>\n<p><strong>출처</strong> <br>\n쉽게 배우는 운영체제, 조성호</p>","fields":{"slug":"/posts/OS Textbook Summary 2","tagSlugs":["/tag/operating-system/"]},"frontmatter":{"date":"2021-08-12T07:44:16.303Z","description":"운영체제 2단원 정리","tags":["Operating System"],"title":"쉽게 배우는 운영체제, 조성호 - 2 단원 정리","socialImage":{"publicURL":"/static/6d93cbc4956a854d4c4369f0e281e7f3/42-line-bible.jpg"}}}},"pageContext":{"slug":"/posts/OS Textbook Summary 2"}},"staticQueryHashes":["251939775","3489966879","401334301","825871152"]}